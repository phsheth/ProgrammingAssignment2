x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)
names(vect2) <- c("foo","bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <-cnames
my_data
library(swirl)
ls()
rm(list=ls())
swirl()
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6==7
6 < 7
10 <=10
5 != 7
(5 == 7)== !TRUE
(5 == 7)== !FALSE
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
2
identical('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which((ints>7))
which([ints>7])
info(which())
info(which)
?which
which(ints>7)
any(int<0)
any(ints<0)
all(ints>0)
Sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first fuction!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(7,3)
remainder(7,3)
submit()
submit()
remainder(7,4)
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(stdev,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8,4,0))
evaluate(function(c){c[1]+1}, c(8,4,0))
evaluate(function(x){x[1]+1}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(hello)
telegram("hello")
submit()
submit()
mad_libs("Coventry","enthusiastic","icecream parlour")
submit()
"I" %p% "love" %p% "R!"
d2 <- Sys.Date()
d2 <- Sys.Date()
d1 <- Sys.Date()
class(d1)
ls()
library(swirl)
rm(list=ls())
swirl()
unclass(d1)
d1
d2 = as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
unclass(t2)
class(t2)
t2
unclass)t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
d1 <- weekdays()
weekdays(d1)
months(d1)
months(11)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Priod)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,)
LETTERS
sample(LETTERS)
sample(c(0,1), 100)
sample(c(0,1), 100, replace = TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=c(0.3,0.7))
flips
slips(sum)
sum(flips)
?rbinom
rbinom(1,size=100, prob=0.7)
rbinom(100,size=1, prob=0.7)
flips2<-rbinom(100,size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,mean=10)
rpois(5,10)
my_pois = replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(crs)
plot(cars)
?plot
plot(speed,dist)
plot(speed,dist,...)
plot(speed,dist,)
plot(speed,)
plot(speed)
plot(dist)
plot.defaile(speed,dist)
plot.default(speed,dist)
speed
cars[1]
plot(x=cars$speed, y = cars$dist)
plot(x=cars$dist, y = cars$speed)
plot(x=cars$speed, y = cars$dist)
plot(x=cars$speed, y = cars$dist, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist,ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
cd /data
mkdir ../data
mkdir /data
touch data
mkdir data
pwd
getwd
getwd()
install.packages(KernSmooth)
install.packages(kernsmooth)
install.packages("KernSmooth")
library(KernSmooth)
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
class(cbind(x, y))
x
class(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 4] <- 10
x
x[x > 4] <- 10
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x >= 10] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
library(swirl)
rm(lists=ls())
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
library(datasets)
data(iris)
?iris
head(iris)
iris[1]
mean(iris[1])
apply(iris[1], 2, mean)
apply(iris, 2, mean)
colMeans(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
head(mtcars)
sub_4cyl = sub(mtcars, cyl=4,select = hp)
sub_4cyl = sub(mtcars, cyl==4,select = hp)
sub_4cyl = subset(mtcars, cyl==4,select = hp)
sub_4cyl
apply(sub_4cyl, 2, mean)
sub_6cyl = subset(mtcars, cyl==6,select = hp)
apply(sub_6cyl, 2, mean)
122.2857 - 82.63636
debug(ls)
ls()
exit()
exit
cls
clear
head(iris)
head(iris)
mean(Sepal.Length)
Q
library(datasets)
data(iris)
head(iris)
mean(Sepal.Length)
apply(iris[1],2,mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
colMeans(iris)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
head(mtcars)
sub_4cyl = subset(mtcars, cyl == 4, select=hp)
sub_6cyl = subset(mtcars,cyl==8,select=hp)
apply(mean,2,sub_6cyl)-apply(mean,2,sub_4cyl)
sub_8cyl = subset(mtcars,cyl==8,select=hp)
sub_8cyl
apply(mean,2,sub_4cyl)
colMeans(sub_4cyl)
colMeans(sub_8cyl)
colMeans(sub_8cyl) - colMeans(sub_4cyl)
colMeans(iris)
colMeans(iris[1])
head(iris)
sub_vir = subset(iris, Species = virginica, select = Sepal.Length)
colMeans(sub_vir)
sub_vir
sub_vir = subset(iris, Species == virginica, select = Sepal.Length)
sub_vir = subset(iris, Species == , select = Sepal.Length)
iris
sub_vir = subset(iris, Species == virginica, select = Sepal.Length)
sub_vir = subset(iris, Species == virginica, select = Sepal.Length)
sub_vir = subset(iris, Species == "virginica", select = Sepal.Length)
sub_vir
colMeans(sub_vir)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
library(swirl)
rm(list=ls())
swirl()
exit()
exit
swirl()
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE) == FALSE
6==7
6<7
10 <=10
5<=7
5>=7
5!=7
5!=7
5==7
5!==7
!(5==7)
FALSE&FALSE
TRUE&C(TRUE,FALSE,FALSE)
TRUE&c(TRUE,FALSE,FALSE)
library("swirl")
swirl()
source("makevector.R")
source(makevector.R)
setwd("C:/Users/pushu/Documents/work/mooc/datascience/c3/assignment/ProgrammingAssignment2")
getwd()
source("makevector.R")
makeVector(c(10,20,30,40))
makeVector(x = c(10,20,30,40))
makeVector(1)
m$setmean
View(my_matrix)
a <- c(10,20,30,40)
makeVector(x = a)
a$setmean
b <- makeVector(x = a)
b
b$getmean
b$setmean
source("cachemean.R")
cachemean(b)
a
mean(a)
t1 = c(100,200,300,400)
t1
t1 <- c(100,200,300,400)
t1
cname(t1)
t2 <- makeVector(t1)
t2
t2$getmean
cachemean(t2)
getwd()
t3<-cachemean(t2)
t3
A = matrix(c(2, 4, 3, 1, 5, 7),nrow=2,ncol=3,byrow = TRUE)
A
source("cachematrix.R")
m1<-makeCacheMatrix(A)
source("cachematrix.R")
m1<-makeCacheMatrix(A)
source("cachematrix.R")
m1<-makeCacheMatrix(A)
m1
m2<-cacheSolve(m1)
m2<-cacheSolve(A)
m1$getinv
m2<-cacheSolve(A)
m2<-cacheSolve(A)
m2<-cacheSolve(m1)
m2<-cacheSolve(m1)
source("cachematrix.R")
m2<-cacheSolve(m1)
A
m1<-makeCacheMatrix(A)
m1
m1$getinv
m2<-cacheSolve(m1)
A = matrix(c(2, 4, 3, 1, 5, 7,4,5,3),nrow=3,ncol=3,byrow = TRUE)
A
m1<-makeCacheMatrix(A)
m2<-cacheSolve(m1)
m2
solve(A)
?set.seed
